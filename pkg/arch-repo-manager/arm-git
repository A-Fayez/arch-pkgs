#!/bin/bash
# Wraps aursync command to mount an amazon s3 bucket which contains a repository
set -uo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

configs=(
  "${XDG_CONFIG_HOME:-$HOME/.config}/arm/config"
  "/etc/arm/config"
  "../../../arm.conf"
  "../../arm.conf"
  "../arm.conf"
  "arm.conf"
)

for config in "${configs[@]}"; do
    [[ -f "$config" ]] && source "$config"
done

: "${REPO_PATH:?"REPO_PATH missing"}"
: "${GIT_REPO_BRANCH:?"REPO_BRANCH missing"}"
: "${GIT_REPO_URL:?"REPO_URL missing"}"

DATA_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/arm"
GIT_REPO_DIR="${DATA_DIR}/repo"

command="$1"
shift

exit_cmd=""
defer() { exit_cmd="$@; $exit_cmd"; }
trap 'bash -c "$exit_cmd"' EXIT

mount_repo() {
    git -C "${GIT_REPO_DIR}" pull
    defer 'git -C "${GIT_REPO_DIR}" add .; git -C "${GIT_REPO_DIR}" commit -am "Updated by $0"; git -C "${GIT_REPO_DIR}" push'
    mkdir -p "${GIT_REPO_DIR}/${REPO_PATH}"
}

init() {
    mkdir -p "${GIT_REPO_DIR}"
    git clone "${GIT_REPO_URL}" -b "${GIT_REPO_BRANCH}" "${GIT_REPO_DIR}"
}

clean_chroot() {
    echo "Cleaning up: ${DATADIR}/chroots"
    sudo rm -rf "${DATADIR}/chroots"
}

build() {
    local packages=${@:-pkg/*}
    local chroot="${DATA_DIR}/chroots"

    mkdir -p "$chroot"

    [[ -d "$chroot/root" ]] || mkarchroot -C /etc/pacman.conf $chroot/root base-devel

    for package in $packages; do
        cd "$package"
        rm -f *.pkg.tar.xz
        makechrootpkg -cur $chroot
        cd -
    done

    mount_repo
    for package in $packages; do
        rsync --ignore-existing -v "${package}"/*.pkg.tar.xz "$GIT_REPO_DIR/$REPO_PATH"
    done
    repose --verbose --xz --root="$GIT_REPO_DIR/$REPO_PATH" "$REPO_NAME"
}

sync() {
    mount_repo
    aursync --repo mdaffin --root $GIT_REPO_DIR/$REPO_PATH "$@"
}

shell() {
    mount_repo
    export REPO="${GIT_REPO_DIR}"
    echo "You are now in a subshell with the repo mounted to \$REPO. CTRL+D or type exit to exit"
    $SHELL "$@"
}

case "$command" in
init)
    init
    ;;
clean-chroot)
    clean_chroot
    ;;
build)
    build "$@"
    ;;
sync)
    sync "$@"
    ;;
shell)
    shell "$@"
    ;;
esac
